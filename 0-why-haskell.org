* Giới thiệu: Tại sao lại là Haskell?

** Chúng tôi có một thứ mới cho bạn!

Haskell là một ngôn ngữ sâu sắc, và chúng tôi nghĩ rằng việc học ngôn ngữ này 
là một trải nghiệm rất đáng giá. Chúng ta sẽ tập trung vào ba yếu tố 
khi giải thích lí do. Thứ nhất là /tính mới/: chúng tôi mời bạn nghĩ về 
lập trình từ một góc nhìn khác đi và rất đáng giá. Thứ hai là 
/năng lực/: chúng tôi sẽ cho bạn thấy cách tạo ra phần mềm ngắn gọn, 
nhanh và an toàn. Cuối cùng, chúng tôi cho bạn nhiều điều /vui vẻ/: 
sự hài lòng khi áp dụng những kĩ thuật lập trình thanh lịch để giải 
những bài toán thực sự.

*** Tính mới

Haskell nhiều khả năng là khác hẳn bất cứ ngôn ngữ nào khác mà bạn 
từng sử dụng trước đây. So với tập hợp khái niệm thông thường trong 
không công cụ tư duy của lập trình viên, lập trình hàm cho ta một 
cách nghĩ khác hẳn về phần mềm.

Trong Haskell, ta bỏ sự nhấn mạnh mã lệnh làm thay đổi dữ liệu. 
Thay vào đó, ta tập trung vào các hàm để nhận vào những giá trị bất biến 
và rồi tạo kết quả đầu ra là những giá trị mới. Miễn là với cùng đầu vào,
các hàm này luôn trả lại kết quả giống nhau. Đây là ý tưởng mấu chốt 
bên trong lập trình hàm.

Cùng với việc không thay đổi dữ liệu, các hàm Haskell của ta thường không 
nói chuyện với thế giới bên ngoài; ta gọi những hàm này là /thuần khiết/.
Chúng ta phân biệt rõ giữa mã lệnh thuần khiết và những phần chương trình 
đọc hoặc ghi file, liên lạc qua kết nối mạng, hoặc làm cử động cánh tay 
robot. Điều này giúp ta tổ chức, luận ra chương trình, và kiểm thử
chương trình dễ dàng hơn.

Chúng tôi bỏ qua một số ý tưởng mà nghe có vẻ cơ bản, như việc có
một vòng lặp ~for~ dựng sẵn trong ngôn ngữ. Chúng ta có những cách khác, 
linh hoạt hơn, để thực hiện việc lặp.

Ngay cả cách mà chúng ta ước lượng các biểu thức cũng khác trong 
Haskell. Chúng ta trì hoãn mọi tính toán cho đến khi kết quả phải
thực sự cần đến: Haskell là ngôn ngữ /lười/. Sự lười biến không phải 
là đùn đẩy công việc qua lại: nó ảnh hưởng sâu sắc đến cách mà ta
viết chương trình.

*** Năng lực

Xuyên suốt cuốn sach này, chúng tôi sẽ cho bạn thấy rằng
so với những ngôn ngữ truyền thống, những cái khác của Haskell
đều rất mạnh mẽ, linh hoạt, và dẫn tói mã lệnh đáng tin cậy. 
Haskell được tích cực nhồi cho những ý tưởng mới mẻ nhất 
về cách tạo nên phần mềm tốt.

Vì mã lệnh thuần khiết không dính líu đến môi trường bên ngoài, và 
dữ liệu mà nó làm việc với thì sẽ không bao giờ thay đổi, nên những
trường hợp ngạc nhiên khó chịu -- kiểu như chẳng hiểu sao mã lệnh lại 
làm rối beng dữ liệu dùng bởi một đoạn mã lệnh khác -- là rất hiếm. 
Bất kể ngữ cảnh nào khi ta dùng một hàm thuần khiết, hàm sẽ luôn ứng xử
một cách nhất quán.

Mã lệnh thuần khiết sẽ dễ kiểm thử hơn là mã lệnh có liên lạc với
môi trường biên ngoài. Khi một hàm chỉ phản hồi với những dữ liệu 
đầu vào hiện hữu, thì ta dễ dàng nêu những thuộc tính với những ứng xử
luôn đúng. Ta có thể tự động kiểm tra rằng những thuộc tính đó luôn đúng 
với một lượng lớn các dữ liệu đầu vào ngẫu nhiên, và khi phép thử đạt 
yêu cầu, ta sẽ tiếp tục. Ta sẽ vẫn dùng những kĩ thuật truyền thống để 
kiểm thử mã lệnh có tương tác với file, mạng hay phần cứng ngoại lai. 
Vì mã lệnh không thuần khiết này sẽ ít gặp so với ở một ngôn ngữ 
truyền thống, nên sẽ đảm bảo hơn là phần mềm sẽ chắc chắn.

Đánh giá lười biếng cũng có vài hiệu ứng đáng sợ. Chẳng hạn, ta muốn 
tìm phần tử nhỏ thứ /k/ trong một danh sách chưa được sắp xếp. 
Với ngôn ngữ truyền thống, cách làm hiển nhiên sẽ là sắp xếp danh sách
này và lấy ra /k/ phần tử đầu, nhưng cách này lại rất tốn kém.
Để hiệu quả hơn, thay vì vậy ta sẽ viết một hàm đặc biệt để nhận 
những giá rị này một lượt, và sẽ phải thực hiện một số thao tác 
kiểm kê khá phức tạp. Trong Haskell, cách sắp xếp rồi lấy 
thực ra sẽ hoạt động tốt: tính lười biếng đảm bảo rằng danh sách 
sẽ chỉ được sắp xếp vừa đủ để tìm thấy phần tử nhỏ /k/ 
xong là thôi.

Còn tốt hơn nữa là mã Haskell vận hành trơn tru cũng rất ngắn gọn 
và chỉ dùng các hàm trong thư viện chuẩn.

#+CAPTION: KMinima.hs
#+BEGIN_SRC haskell
-- lines beginning with "--" are comments.

minima k xs = take k (sort xs)
#+END_SRC

Để dùng trực quan mà hiểu được khi nào cần có việc ước tính theo cách 
lười biếng, có lẽ phải mất chút thời gian. Song khi ta khai thác được
thì mã lệnh thường sẽ ngắn gọn, rõ ràng, và hiệu quả hơn.

Như ví dụ trên đã cho thấy, một khía cạnh quan trọng của sức mạnh Haskell
nằm ở chỗ tính súc tích của mã lệnh được viết ra. So với khi làm việc 
với những ngôn ngữ truyền thống, khi phát triển bằng Haskell ta thường
viết ít mã lệnh hơn hẳn, với thời gian rút ngắn đáng kể và cũng 
ít lỗi hơn.

*** Niềm vui

Chúng tôi tin rằng rất dễ dàng học những thứ cơ bản trong lập trình
Haskell, và bạn sẽ có thể viết thành công những chương trình ngắn 
sau vài giờ hoặc vài ngày học.

Vì việc lập trình hiệu quả bằng Haskell khác hẳn so với những ngôn ngữ
còn lại, nên bạn cần dự trù rằng việc làm chủ cả bản thân
ngôn ngữ này lẫn các kĩ thuật lập trình hàm đều mất rất nhiều 
suy nghĩ và thực hành.

Nhìn lại thời kì trước lúc chúng tôi bắt đầu với Haskell, một tin vui
là sự hứng khởi bắt đầu rất sớm: đơn giản đó chỉ là một thử thách 
hấp dẫn để tìm hiểu sâu về một ngôn ngữ, trong đó 
nhiều ý tưởng thông dụng đã khác đi hoặc còn thiếu, và để hình dung
ra cách viết một chương trình đơn giản.

Đối với chúng tôi, niềm vui ban đâu vẫn còn khi kinh nghiệm dần 
nâng cao và hiểu biêt sâu hơn. Trong những ngôn ngữ khác, thật khó 
tìm được những kết nối giữa khoa học lẫn những sự vụ trong lập trình. 
Trong Haskell, ta đã thu nhập vài ý tưởng từ toán học trừu tượng
và áp dụng vào công việc. Thậm chí, ta còn thấy rằng những ý tưởng
này không chỉ dễ học mà chúng còn phát huy tác dụng để giúp ta
viết được mã lệnh gọn gàng và dễ tái sử dụng hơn.

Ngoài ra, chúng tôi sẽ không dựng nên những "bước tường" chắn đường bạn:
không có khó khăn đặc biệt hay kĩ thuật hiểm hóc nào trong cuốn sách này
mà bạn cần phải làm chủ để có thể lập trình một cách
hiệu quả.

Dù nói vậy, Haskell là một ngôn ngữ nghiêm ngặt: sẽ mất thêm chút 
thời gian để gỡ lỗi phần nhiều mã lệnh trước khi chạy được nó, để
phản hồi cho trình biên dịch báo rằng có chỗ nào trong chương trình
của bạn vô lí hay không. Ngay cả khi đã có nhiều năm kinh nghiệm, 
chúng tôi vẫn ngạc nhiên và hài lòng về mức độ thường xuyên mà
chương trình Haskell chạy được ngay lần thử đầu tiên, một khi 
chúng tôi sửa được những lỗi biên dịch đó.

** Bạn sẽ trông chờ gì ở cuốn sách này 

Chúng tôi khởi đầu dự án này vì ngày càng có nhiều người sử dụng
Haskell để giải quyết các bài toán thường ngày. Vì Haskell có 
nguồn gốc từ giới học thuật nên một số sách Haskell hiện phát hành 
lại tập trung vào những bài toán và kĩ thuật lập trình thường ngày
mà ta quan tâm.

Với cuốn sách này, chúng tôi muốn cho bạn thấy cách dùng lập trình hàm
và Haskell để giải các bài toán thực tế. Đây là một cuốn sách
thực hành: mỗi chương đều có hàng tá mã lệnh ví dụ, và có chương
chứa cả trình ứng dụng hoàn chỉnh. Sau đây là vài ví dụ các 
thư viện, kĩ thuật và công cụ mà chúng tôi sẽ cho bạn thấy cách
xây dựng.

- Tạo một ứng dụng để tải về các kì phát podcast từ
  Internet, và lưu lịch sử tải về vào trong một cơ sở dữ liệu SQL.
- Kiểm thử mã lệnh bạn viết theo cách trực quan mạnh mẽ. Mô tả
  những thuộc tính cần phải giữ đúng, rồi dùng thư viện QuickCheck
  để tự động phát sinh những kịch bản kiểm thử.
- Chụp một tấm ảnh nhòe của hàng mã vạch, và biến nó thành 
  chứng nhận mà bạn có thể dùng để tìm kiếm trong một thư viện
  hoặc trên web site của một hiệu sách.
- Viết mã lệnh sinh sôi nảy nở trên web. Trao đổi dữ liệu với 
  các máy chủ và máy khách được viết bằng những ngôn ngữ khác 
  thông quá kí hiệu JSON. Xây dựng một bộ kiểm tra link tương tranh.

*** Về phía bạn

Bạn cần biết gì trước khi đọc cuốn sách này? Chúng tôi dự trù rằng
bạn đã biết cách lập trình rồi, nhưng nếu bạn chưa từng dùng một
ngôn ngữ lập trình hàm thì cũng được.

Bất kể trình độ kinh nghiệm của bạn, chúng tôi đã cố gắng 
lường trước nhu cầu của bạn: chúng tôi bước xuống và giải thích kĩ
những ý tưởng mới và có thể là các mẹo, thường dùng các ví dụ
và hình ảnh để nhấn mạnh những điểm này.

Là người lập trình mới với Haskell, bạn sẽ không thể tránh khỏi 
việc tự tay viết vài đoạn mã mà đáng lẽ bạn đã dùng một thư viện
hoặc một kĩ thuật lập trình nếu bạn đã biết trước. Chúng tôi đưa vào
cuốn sách này nhiều thông tin để giúp bạn đạt tốc độ 
càng nhanh càng tốt.

Dĩ nhiên, sẽ vẫn có những đoạn gập ghềnh trên con đường ta đi. Nếu bạn
bắt đầu lường trước những ngạc nhiên hoặc khó khăn đôi lúc xảy ra
bệnh cạnh phần thú vị, thì đó chính là trải nghiệm tốt nhất. Bất kì
chỗ gập ghềnh nào bạn va váp sẽ không xảy ra quá lâu.

Khi bạn đã thạo lập trình Haskell hơn, cách viết mã lệnh của bạn
sẽ thay đổi. Thật ra, trong sách này, chúng tôi sẽ trình bày mã lệnh
theo cách tiến hóa dần, cùng với việc chúng ta chuyển dần từ phần
cơ bản của ngôn ngữ lên đến những đặc điểm và kĩ thuật lập trình 
mạnh mẽ hơn và cho kết quả tốt hơn.

** Điều bạn trông chờ từ Haskell

Haskell là một ngôn ngữ lập trình đa mục đích. Nó được thiết kế 
mà không nhằm bất kì một phân khúc ứng dụng nào. Dù rằng Haskell 
giữ vững lập trường về cách viết một chương trình, song nó không
đề cao một lĩnh vực cụ thể nào cả.

Dù tại gốc rễ của nó, Haskell khuyến khích lập trình hàm với 
phong cách thuần khiết và "lười biếng", nhưng đó chỉ là 
/mặc định/, chứ không phải lựa chọn duy nhất. Haskell cũng
trợ giúp những mô hình truyền thống hơn, với mã lệnh thủ tục và
ước lượng chặt chẽ. Hơn nữa, mặc dù mục tiêu của ngôn ngữ
đơn thuần là viết những chương trình định kiểu tĩnh, song cũng
có thể (dù ít gặp) viết mã lệnh Haskell theo lối định kiểu động.


*** So sánh với những ngôn ngữ tĩnh truyền thống

Các ngôn ngữ sử dụng hệ thống định kiểu tĩnh đơn giản đã 
giữ vai trò trung tâm của thế giới lập trình trong hàng thập kỉ. 
Haskell cũng định kiểu tĩnh, nhưng cách viết về tác dụng kiểu dữ liệu 
và cách dùng chúng thì linh hoạt và mạnh hơn hẳn ở những
ngôn ngữ truyền thống. Kiểu dữ liệu đã đóng góp quan trọng tới
sự gọn ghẽ, rõ ràng và hiệu quả của chương trình viết bằng Haskell.


Mặc dù mạnh mẽ, song hệ thống kiểu trong Haskell thường cũng
không gây chú ý. Nếu ta bỏ không ghi rõ thông tin kiểu, 
trình biên dịch Haskell sẽ tự động suy luận ra kiểu của một biểu thức
hay hàm. So với những ngôn ngữ tĩnh truyền thống - ở đó ta phải 
tư gõ vào rất nhiều thông tin về kiểu - thì sự kết hợp giữa
sức mạnh và suy luận trong hệ thống kiểu Haskell đã giảm được 
đáng kể sự vướng víu và dư thừa trong mã lệnh bạn viết.

Vài đặc điểm khác của Haskell đã kết hợp để tăng thêm khối lượng 
công việc mà ta làm được chỉ bằng một trang mã lệnh. Điều này 
đem tới cải thiện về thời gian phát triển và tính khẩn trương: ta 
có thể nhanh chóng tạo nên mã lệnh đáng tin cậy, và tái cấu trúc nó
dễ dàng theo các yêu cầu luôn thay đổi.

Đôi khi, chương trình viết bằng Haskell có thể chạy chậm hơn những
chương trình tương tự viết bằng C hay C++. Với đa phần mã lệnh ta viết ra,
những ưu điểm vượt trội của Haskell về hiệu suất lẫn độ tin cậy thường
lấn lướt những bất lợi nhỏ về hiệu năng.

Các bộ xử lý đa nhân giờ đây đã phổ biến rộng khắp, nhưng còn rất khó
để lập trình chúng bằng những kĩ thuật truyền thống.
Haskell cho ta những công nghệ độc đáo để giúp cho việc lập trình
đa nhân được dễ kiểm soát hơn. Nó hỗ trợ lập trình song song, 
bộ nhớ giao dịch phần mềm cho cách tương tranh tin cậy, và mở rộng
được tới hàng trăm nghìn luồng tương tranh khác nhau.

*** So sánh với các ngôn ngữ động hiện đại

Suốt thập kỉ qua, những ngôn ngữ thông dịch định kiểu động 
đã dần trở nên phổ biến. Chúng cung cấp những lợi ích rõ rệt
về năng suất phát triển. Mặc dù điều này phải trả giá lớn về
hiệu năng, vì với nhiều nhiệm vụ lập trình, năng suất được coi trọng
hơn hiệu năng, hoặc hiệu năng không phải là một yếu tố đáng kể
về mọi mặt.

TÍnh ngắn gọn là một khía cạnh mà Haskell và những ngôn ngữ 
định kiểu động ghi điểm tương đương nhau. Trong cả hai trường hợp,
để giải quyết bài toán chỉ cần viết ít mã lệnh hẳn so với một
ngôn ngữ truyền thống. Các chương trình thường có kích thước
xấp xỉ nhau khi viết bằng ngôn ngữ định kiểu động và Haskell.

Khi ta xét hiệu năng khi chạy chương trình, Haskell gần như luôn 
có lợi thế vượt trội. Mã lệnh biên dịch bởi Glasgow Haskell Compiler
(GHC) nhanh hơn từ 20 đến 60 lần mã lệnh chạy từ trình biên dịch
của một ngôn ngữ động. GHC còn cung cấp một trình thông dịch,
vì vậy bạn có thể chạy các đoạn văn lệnh mà không cần biên dịch chúng.

Một điểm khác biệt lớn giữa các ngôn ngữ định kiểu động và 
Haskell là ở chỗ triết lí của chúng về kiểu dữ liệu. Một lí do 
chính mà ngôn ngữ định kiểu động trở nên phổ biến là rất ít khi
ta cần nói rõ kiểu dữ liệu. Thông qua cơ chế tự động suy luận kiểu,
Haskell cũng có ưu điểm tương tự.

Ngoài những điểm tương đồng bên ngoài này, sự khác biệt giữa chúng
rất sâu sắc. Trong ngôn ngữ định kiểu động, ta có thể tạo những cấu trúc
mà rất khó diễn đạt bằng ngôn ngữ định kiểu tĩnh. Tuy nhiên, 
điều ngược lại cũng đúng: với một hệ thống định kiểu mạnh như của
Haskell thì ta có thể cấu trúc một chương trình theo cách mà nếu dùng
ngôn ngữ định kiểu động sẽ không thể quản lý được hoặc không khả thi.

Cần nhận thấy rằng mỗi cách tiếp cận này đều phải có sự đánh đổi.
Nói ngắn gọn, quan điểm của Haskell nhấn mạnh sự an toàn, còn
hẹ thống định kiểu động thì hướng đến sự linh hoạt. Nếu ai đó
mà phát hiện ra một cách nghĩ về kiểu sao cho luôn tốt nhất với
mọi trường hợp thì cứ thử hình dung xem, hẳn là mọi người bây giờ
đã biết hết về nó rồi.

Dĩ nhiên, chúng tôi có ý kiến riêng về những dánh đổi nào là có lợi.
Nhóm tác giả có hai người đã có nhiều năm kinh nghiệm về lập trình 
bằng những ngôn ngữ định kiểu động. Chúng tôi thích làm việc với chúng; 
chúng tôi vẫn dùng chúng hằng ngày; nhưng chúng tôi thường ưa chuộng Haskell hơn.

*** Haskell trong công nghiệp và mã nguồn mở

Dưới đây chỉ là một số ví dụ từ hệ thống phần mềm lớn đã được 
tạo bằng Haskell. Một số phần mềm trong đây có nguồn mở, 
số còn lại là sản phẩm thương mại.

- Phần mềm thiết kế ASIC và FPGA design software (Lava, sản phẩm của Bluespec
  Inc.)
- Phần mềm biên soạn nhạc (Haskore)
- Trình biên dịch và công cụ liên quan tới biên dịch (nổi bật nhất là GHC)
- Kiểm soát phiên bản phân phối (Darcs)
- Phần trung gian Web (middleware) (HAppS, công cụ Galois Inc.)

Và một số ví dụ các công ty dùng Haskell vào cuối năm 2008,
theo trang web [[http://www.haskell.org/haskellwiki/Haskell_in_industry][Haskell wiki]].

- ABN AMRO, một ngân hàng quốc tế, dùng Haskell cho việc đàu tư;
  họ dùng Haskell để đo mức độ rủi ro đối tác trên các danh mục đầu tư
  của chứng khoán phái sinh.
- Anygma, một công ty khởi nghiệp, phát triển các công cụ sáng tạo 
  nội dung multimedia bằng Haskell.
- Amgen, một công ty công nghệ sinh học, dùng Haskell thiết lập các mô hình toán
  và những ứng dụng phức tạp khác.
- Bluespec, một nhà cung cấp phần mềm thiết kế ASIC và FPGA design, có sản phẩm 
  được phát triển bằng Haskell; Haskell cũng ảnh hưởng đến các ngôn ngữ thiết kế chip 
  cung cấp bởi các sản phẩm đó.
- Eaton dùng Haskell để thiết kế và thẩm định các hệ thống xe lai thủy lực.

*** Biên dịch, gỡ lỗi, và phân tích hiệu năng

Với công việc thực tế thì quan trọng không chỉ ở bản thân ngôn ngữ
mà còn là một hệ thống các thư viện và công cụ xung quanh nó. Haskell
thể hiện rất rõ nét về khía cạnh này.

Trình biên dịch được dùng rộng rãi, GHC, đã được phát triển hơn 
15 năm qua; nó cung cấp một tập hợp tính năng dày dặn và ổn định.

- Biên dịch thành ngon ngữ máy hiệu quả trên tất cả hệ điều hành hiện đại
  và kiến trúc CPU chính
- Dễ dàng phân phối các file nhị phân đã biên dịch mà không bị kìm hãm bởi 
  hạn chế về giấy phép
- Phân tích độ bao phủ mã
- Phân tích hiệu suất chi tiết tốc độ và lượng bộ nhớ sử dụng
- Tài liệu xuyên suốt
- Hỗ trợ lập trình tương tranh và đa nhân với khả năng phóng đại quy mô
- Trình thông dịch và gỡ lỗi tương tác

*** Những thư viện đi kèm và từ bên thứ ba

Trình biên dịch GHC được đóng gói với một tập hợp các thư viện hữu ích.
Dưới dây là một số nhu cầu lập trình thông dụng mà những thư viện này
có thể giúp ta.

- Nhập/xuất file, duyệt và thao tác hệ thống file
- Lập trình phía khách và chủ trên mạng
- Biểu thức thường quy và phân tích từ loại
- Lập trình tương tranh
- Kiểm thử tự động
- Âm thanh và đồ họa

Cơ sở dữ liệu gói Hackage là tập hợp cac thư viện và ứng dụng nguồn mở
của cộng đồng Haskell. Hầu hết các thư viện được xuất bản
trên Hackage đều được gán giấy phép với điều khoản tự do cho phép
sử dụng cả mục đích thương mại lẫn nguồn mở. Một số lĩnh vực
mà các thư viện nguồn mở phát triển bao gồm:

- Giao diện tới tất cả cơ sở dữ liệu quan trọng, cả nguồn mở lẫn thương mại
- Xử lý XML, HTML, và XQuery
- Phát triển mạng và máy khách/máy chủ web
- Giao diện đồ họa trên máy cá nhân, gồm các bộ toolkit chạy trên nhiều nền tảng
- Hỗ trợ Unicode và các chế độ mã hóa kí tự khác.

** Đôi nét về lịch sử Haskell

Sự phát triển của Haskell bắt nguồn từ nghiên cứu toán học và 
khoa học máy tính.

*** Thời tiền sử

Vài thập kỉ trước khi các máy tính hiện đại được phát minh ra,
nhà toán học  Alonzo Church đã phát triển một ngôn ngữ có tên 
giải tích lambda. Ông đã dự kiến dùng nó làm công cụ khảo sát
nền tảng của toán học. Người đầu tiên nhận thấy sự kết nối 
thực dụng giữa lập trình và giải tích lambda là
John McCarthy, người từng tạo ra Lisp năm 1958.

Trong suốt những năm 1960, các nhà khoa học máy tính bắt đầu 
nhận thấy và nghiên cứu tầm quan trọng của giải tích lambda. Peter Landin
và Christopher Strachey phát triển các ý tưởng về nền tảng
ngôn ngữ lập trình: cách để suy luận về việc làm của ngôn ngữ lập trình
(ngữ nghĩa vận hành) và cách hiểu được ý nghĩa của chúng
(ngữ nghĩa toán học).

Vào đầu những năm 1970, Robin Milner đã tạo ra một ngôn ngữ lập trình
chặt chẽ hơn có tên là ML. Khi ML được phát triển để giúp
chứng minh tự động các định lý toán học, nó đã được biết đến nhiều hơn
với những nhiệm vụ tính toán tổng quát hơn.

Những năm 1970 cũng cho thấy sự nổi lên của một chiến lược tính toán
mới: phép ước lượng lười biếng. David Turner phát triển SASL và KRC, 
còn Rod Burstall và John Darlington phát triển NPL và Hope. NPL, KRC 
và ML đã ảnh hưởng đến sự phát triển của vài ngôn ngữ nữa trong 
thập niên 1980s, bao gồm Lazy ML, Clean, và Miranda.

*** Thời xưa

Đến cuối những năm 1980, những nỗ lực nghiên cứu về các ngôn ngữ
lập trình hàm lười biếng đã rải rác trên hơn một tá các ngôn ngữ
khác nhau. Băn khoăn với tình trạng phân tán này, một nhóm 
nghiên cứu đã quyết định thành lập một hội đồng để thiết kế ra
một ngôn ngữ chung. Sau 3 năm làm việc, Hội đồng đã công bố
bản mô tả Haskell 1.0 vào năm 1990. Tên gọi này được đặt theo
Haskell Curry, một nhà logic có tầm ảnh hưởng lớn.

Nhiều người hoài nghi về sự "thiết kế bởi một hội đồng"; họ có
quyền như vậy, song sản phẩm của hội đồng Haskell là một ví dụ 
đẹp của sản phẩm hoàn hảo mà một hội đồng có thể tạo ra. Họ đã 
lập nên một bản thiết kế ngôn ngữ tinh tế và đã thành công 
trong việc thống nhất carc nỗ lực nhen nhóm của từng cộng đồng
nghiên cứu riêng lẻ. Giữa một rừng các ngôn ngữ lập trình hàm 
lười biếng còn tồn tại kể từ năm 1990, chỉ có mình Haskell là
vẫn còn được sử dụng.

Từ khi được công bố năm 1990, tiêu chuẩn ngôn ngữ Haskell đã
trải qua vài lần hiệu đính, lần gần nhất là vào năm 2010. 
Một số bản hiện thực Haskell đã được viết ra, và một số vẫn 
được phát triển tích cực.

Suốt những năm 1990, Haskell phục vụ hai mục đích chính. Một mặt, nó 
cung cấp cho giới nghiên cứu một ngôn ngữ ổn định để thử nghiệm 
việc làm cho các chương trình hàm lười biếng chạy được hiệu quả.
Những nhà nghiên cứu khác thì khám phá cách lập chương trình 
bằng các kĩ thuật hàm lười biếng. Thậ chí có nhóm còn sử dụng
Haskell làm công cụ giảng dạy.

*** Thời kì hiện đại

Dù cho những khám phá chính từ thập kỉ 1990 vấn tiếp diễn, Haskell
còn giữ chỗ đứng chắc chắn trong môi trường học thuật. Khẩu hiệu
dân dã của cộng đồng Haskell là "bằng bất kì giá nào phải tránh sự thành công". 
Rất ít người ngoài biết đến ngôn ngữ này. Lập trình hàm thực sự
là một lĩnh vực khá mơ hồ.

Trong thời kì này, thế giới lập trình chủ đạo đã thử nghiệm khá ít
thay đổi nhỏ: từ lập trình bằng C, sang C++, sang
Java. Cùng lúc, ở bên lề, các lập trình viên bắt đầu nghịch ngợm
các ngôn ngữ mới, có tính chất động hơn. Guido van Rossum thiết kế
Python; Larry Wall tạo ra Perl; và Yukihiro Matsumoto phát triển
Ruby.

Khi những ngôn ngữ mới này bắt đầu được dùng rộng rãi hơn,
chúng lan tỏa những ý tưởng chủ chốt. Thứ nhất, lập trình viên 
không chỉ có khả năng làm việc với những ngôn ngữ biểu đạt tốt;
thực tế là họ đang "phất" lên. Thứ hai, một phần từ hệ quả của 
sự tăng trưởng công năng của máy tính thời bấy giờ: cách thông minh
thường là hi sinh chút hiệu năng tính toán để đổi lấy sự tăng vọt
về hiệu suất lập trình. Cuối cùng, vài trong số các ngôn ngữ trên
đã mượn các đặc điểm từ lập trình hàm.

Trong nửa thập kỉ vừa qua, Haskell đã thoát được ra khỏi môi trường
học thuật, và nổi lên một phần nhờ sự hiện diện của Python, Ruby, và
thậm chí là Javascript. Bây giờ, ngôn ngữ này đang có một văn hóa rực
rỡ, phát triển nhanh trong cộng đồng nguồn mở và khách hàng thương mại,
còn giới nghiên cứu vẫn tiếp tục dùng nó để khai phá về hiệu năng 
cũng như tính biểu đạt trong lập trình.

** Những tài liệu hữu ích

Khi làm việc với Haskell, chắc chắn bạn sẽ đặt ra câu hỏi và muốn 
thêm thông tin. Sau đây là một số nguồn Internet để giúp bạn
tra tìm thông tin và tương tác với các lập trình viên Haskell 
khác.

*** Tài liệu tham khảo

- [[http://www.haskell.org/ghc/docs/latest/html/libraries/index.html][Thư viện phân cấp Haskell]] cung cấp 
  tài liệu cho thư viện tiêu chuẩn đi kèm với trình biên dịch.
  Đây là một trong những tài liệu trực tuyến quý giá nhất cho 
  các lập trình viên Haskell.
- Nếu bạn hỏi về cú pháp và các tính năng của ngôn ngữ, bản
  [[http://haskell.org/onlinereport/haskell2010/][Báo cáo Haskell 2010]]
  có mô tả tiêu chuẩn ngôn ngữ Haskell 2010.
- Nhiều phần mở rộng của ngôn ngữ đã trở nên thông dụng
  từ khi bản Báo cáo Haskell 2010 được phát hành. 
  Cuốn [[http://www.haskell.org/ghc/docs/latest/html/users_guide/index.html][Hướng dẫn người dùng GHC]]
  có chứa tài liệu cụ thể về những phần mở rộng được
  GHC hỗ trợ, cũng như một số tính năng chỉ có ở GHC.
- [[http://haskell.org/hoogle/][Hoogle]] và [[http://holumbus.fh-wedel.de/hayoo/hayoo.html][Hayoo]] là 
  các máy tìm kiếm Haskell API. Chúng có thể tìm các hàm theo tên hoặc theo kiểu.

*** Các ứng dụng và thư viện

Nếu bạn cần tìm một thư viện Haskell để dùng cho mục đích cụ thể,
hay một ứng dụng viết bằng Haskell, thì hãy rà soát những nguồn sau:

- Cộng đồng Haskell duy trì một kho mã lệnh trung tâm để chứa các 
  thư viện và ứng dụng nguồn mở Haskell. Nó được gọi là 
  [[http://hackage.haskell.org/][Hackage]], và cho phép bạn tìm kiếm
  phần mềm để tải về, hoặc duyệt các tập hợp phần mềm theo thể loại.
- Trang [[http://haskell.org/haskellwiki/Applications_and_libraries][Haskell Wiki]]
  có một phần dành riêng cho thông tin về các thư viện Haskell cụ thể.

*** Cộng đồng Haskell

Có nhiều cách để liên hệ với các lập trình viên Haskell khác,
để đặt câu hỏi, tìm hiểu những vấn đề đang được thảo luận, 
và đơn giản chỉ là tạo kết nối với các đồng nghiệp.

- Điểm dừng đầu tiên của bạn trong chặng đường tìm kiếm tài liệu của cộng đồng là
  [[http://www.haskell.org/][website của Haskell]]. Trang web này chứa những đường link
  tới nhiều cộng đồng và nguồn thông tin , cũng như một wiki khổng lồ và được tích cực duy trì.
- Các hội viên Haskell dùng đến nhiều [[http://haskell.org/haskellwiki/Mailing_lists][danh sách mailing]]
  để thảo luận các chủ đề. Trong số đó, danh sách hay nhất có tên là
  haskell-cafe. Ở đó là bầu không khí thoải mái, thân thiện, và
  các giáo sư và chuyên gia gặp gỡ trò chuyện với người mới đến
  và các hacker nghiệp dư.
- Nếu muốn chat trực tiếp, [[http://haskell.org/haskellwiki/IRC_channel][Kênh IRC Haskell]], tên là #haskell,
  có quy mo lớn và sôi động. Cũng như haskell-cafe, bầu không khí luôn 
  thân thiện và chào đón mặc dù có rất đông người cùng lúc tham gia. 
- Có nhiều nhóm người dùng, cuộc gặp gỡ, lớp học thuật v.v. 
  tổ chức ở địa phương; và đây là
  [[http://haskell.org/haskellwiki/User_groups][danh sách của nhứng nhóm người dùng và lớp được tổ chức]].
- Bản [[https://wiki.haskell.org/Haskell_Communities_and_Activities_Report][Báo cáo về hoạt động và cộng đồng Haskell]]
  tổng hợp thông tin về những người dùng Haskell, cùng mục đích sử dụng. Báo cáo này
  được biên tập qua nhiều năm, do đó sẽ giúp ta nhìn về quá khứ của Haskell.
  
** Lời cảm tạ

Cuốn sách này sẽ không định hình nếu thiếu cộng đồng Haskell:
một nhóm các nghệ sĩ, giáo sư và kĩ sư đầy hoài bão vượt ngoài khuôn khổ, 
những người đã qua 20 năm làm việc để tạo ra một thế giới lập trình 
tốt hơn, tránh được các lỗi. Cộng đồng Haskell thật độc đáo
về sự kết hợp giữa thái độ thân thiện và chiều sâu trí tuệ.

Chúng tôi muốn cảm ơn biên tập viên, Mike Loukides, cùng với 
nhóm xuất bản tại O'Reilly vì những lời khuyên và sự giúp đỡ từ họ.

*** Bryan

Tôi rất vui khi làm việc với John và Don. Tính độc lập, 
thiện tâm, và tài năng đáng ngưỡng mộ của họ đã giúp cho 
quá trình viết lách được thuận buồm xuôi gió.

Simon Peyton Jones đã cho một sinh viên đại học cơ hội 
sau khi đột nhiên nhận email từ cậu này vào đầu năm 1994. 
Việc được thực tập cùng ông suốt mùa hè năm đó vẫn là một
điểm sáng trong sự nghiệp của tôi. Với tấm lòng rộng lượng,
nhiệt huyết bất tận và luôn khuyến khích hợp tác, ông đã 
thắp lửa cho cả cộng đồng Haskell.

Các con tôi, Cian và Ruairi, luôn sẵn sàng giúp tôi giải trí
với những trò chơi kì quặc, ngộ nghĩnh tuyệt vời.

Sau cùng, dĩ nhiên tôi biết ơn người vợ, Shannon, đã
dành tình yêu, trí tuệ và trợ giúp suốt quá trình thai nghén
cuốn sách này.

*** John

Tôi rất vui được dịp làm việc với Bryan và Don trong
dự án này. Chiều sâu hiểu biết cũng như kinh nghiệm về Haskell
của họ thật kinh ngạc. Tôi thích việc cuối cùng ba người chúng
tôi cùng ngồi xuống giải quyết tranh luận -- hơn một năm sau
khi bắt đầu viết.

Bé Jacob nhà tôi lên hai, cháu quả quyết rằng con cũng thích 
gõ bàn phím, và luôn hòa hứng gọi bố ra nghỉ làm việc máy tính
để giúp con gõ phím lách cách trên một máy đánh chữ cũ
50 năm tuổi.

Và quan trọng nhất, tôi không thể chuyên tâm vào dự án này
nếu thiếu tình thương, sự trợ giúp cùng khích lệ từ vợ tôi,
Terah.

*** Don

Trên hết thảy, tôi muốn cám ơn các chiến hữu tuyệt vời, 
John and Bryan, đã động viên, khích lệ và góp ý.

Các đồng nghiệp của tôi tại Galois, Inc., những người thường xuyên 
dùng Haskell vào việc thực, đã phản hồi và tranh luận sôi nổi,
và liên tục trao tay tôi những tách cà phê espresso nóng.

Thầy hướng dẫn nghiên cứu sinh cho tôi, Manuel Chakravarty, cùng
nhóm nghiên cứu PLS, đã động viên, chỉ hướng và cho tôi thấy rằng
một cách tiếp cận nền tảng, chặt chẽ cho lập trình có thể khiến 
điều bất khả thi xảy ra.

Và sau cùng, cám ơn Suzie đã thấu hiểu, khoan dung và yêu thương.

*** Cảm ơn những người phản biện

Chúng tôi phát triển nội dung sách này bằng cách đăng công khai 
lên website những bản nháp các chương khi vừa viết xong. Sau đó, 
bạn đọc gửi về ý kiến phản hồi bằng một ứng dụng web do 
chúng tôi phát triển. Cho đến lúc chúng tôi hoàn thành cuốn sách 
này, đã có khoảng 800 người đóng góp trên 7.500 ý kiến,
một con số kinh ngạc.

Chúng tôi chân thành ghi nhận một tập thể lớn đã dành nhiều thời gian 
tự nguyện giúp chúng tôi hiệu đính cuốn sách này. Sự động viên và
nhiệt tình từ phía họ trong 15 tháng qua giúp cho quá trình 
viết sách của chúng tôi rất thú vị.

Bề rộng và chiều sâu của những góp ý mà chúng tôi nhận được đã 
cải thiện sâu sắc chất lượng cuốn sách này. Dù vậy, dĩ nhiên vẫn 
còn những thiếu sót mà chúng tôi chưa sửa được.

Những bạn sau mỗi người đã đóng góp trên 1% tổng số ý kiến đóng góp
mà chúng tôi đã nhận được. Chúng tôi muốn cám ơn học về 
sự quan tâm đã gửi đến bao nhiêu phản hồi chi tiết như vậy.

Alex Stangl, Andrew Bromage, Brent Yorgey, Bruce Turner, Calvin
Smith, David Teller, Henry Lenzi, Jay Scott, John Dorsey, Justin
Dressel, Lauri Pesonen, Lennart Augustsson, Luc Duponcheel, Matt
Hellige, Michael T. Richter, Peter McLain, Rob deFriesse, Rüdiger
Hanke, Tim Chevalier, Tim Stewart, William N. Halchin.

Chúng tôi cũng biết ơn những bạn sau, mỗi người đã đóng góp ít nhất 
là 0,2% của tổng số tất cả các lời nhận xét.

Achim Schneider, Adam Jones, Alexander Semenov, Andrew Wagner,
Arnar Birgisson, Arthur van Leeuwen, Bartek Ćwikłowski, Bas Kok,
Ben Franksen, Björn Buckwalter, Brian Brunswick, Bryn Keller,
Chris Holliday, Chris Smith, Dan Scott, Dan Weston, Daniel
Larsson, Davide Marchignoli, Derek Elkins, Dirk Ullrich, Doug
Kirk, Douglas Silas, Emmanuel Delaborde, Eric Lavigne, Erik
Haugen, Erik Jones, Fred Ross, Geoff King, George Moschovitis,
Hans van Thiel, Ionuț Arțăriși, Isaac Dupree, Isaac Freeman, Jared
Updike, Joe Thornber, Joeri van Eekelen, Joey Hess, Johan Tibell,
John Lenz, Josef Svenningsson, Joseph Garvin, Josh Szepietowski,
Justin Bailey, Kai Gellien, Kevin Watters, Konrad Hinsen, Lally
Singh, Lee Duhem, Luke Palmer, Magnus Therning, Marc DeRosa,
Marcus Eskilsson, Mark Lee Smith, Matthew Danish, Matthew Manela,
Michael Vanier, Mike Brauwerman, Neil Mitchell, Nick Seow, Pat
Rondon, Raynor Vliegendhart, Richard Smith, Runar Bjarnason, Ryan
W. Porter, Salvatore Insalaco, Sean Brewer, Sebastian Sylvan,
Sebastien Bocq, Sengan Baring-Gould, Serge Le Huitouze, Shahbaz
Chaudhary, Shawn M Moore, Tom Tschetter, Valery V. Vorotyntsev,
Will Newton, Wolfgang Meyer, Wouter Swierstra.

Chúng tôi muốn cảm ơn các bạn sau, nhiều bạn trong số đó 
đã gửi một số nhận xét đóng góp.

Aaron Hall, Abhishek Dasgupta, Adam Copp, Adam Langley, Adam
Warrington, Adam Winiecki, Aditya Mahajan, Adolfo Builes, Al
Hoang, Alan Hawkins, Albert Brown, Alec Berryman, Alejandro
Dubrovsky, Alex Hirzel, Alex Rudnick, Alex Young, Alexander
Battisti, Alexander Macdonald, Alexander Strange, Alf Richter,
Alistair Bayley, Allan Clark, Allan Erskine, Allen Gooch, Andre
Nathan, Andreas Bernstein, Andreas Schropp, Andrei Formiga, Andrew
Butterfield, Andrew Calleja, Andrew Rimes, Andrew The, Andy
Carson, Andy Payne, Angelos Sphyris, Ankur Sethi, António Pedro
Cunha, Anthony Moralez, Antoine Hersen, Antoine Latter, Antoine
S., Antonio Cangiano, Antonio Piccolboni, Antonios Antoniadis,
Antonis Antoniadis, Aristotle Pagaltzis, Arjen van Schie, Artyom
Shalkhakov, Ash Logan, Austin Seipp, Avik Das, Avinash Meetoo, BVK
Chaitanya, Babu Srinivasan, Barry Gaunt, Bas van Dijk, Ben
Burdette, Ben Ellis, Ben Moseley, Ben Sinclair, Benedikt Huber,
Benjamin Terry, Benoit Jauvin-Girard, Bernie Pope, Björn Edström,
Bob Holness, Bobby Moretti, Boyd Adamson, Brad Ediger, Bradley
Unterrheiner, Brendan J. Overdiep, Brendan Macmillan, Brett
Morgan, Brian Bloniarz, Brian Lewis, Brian Palmer, Brice Lin, C
Russell, Cale Gibbard, Carlos Aya, Chad Scherrer, Chaddaï Fouché,
Chance Coble, Charles Krohn, Charlie Paucard, Chen Yufei, Cheng
Wei, Chip Grandits, Chris Ball, Chris Brew, Chris Czub, Chris
Gallagher, Chris Jenkins, Chris Kuklewicz, Chris Wright, Christian
Lasarczyk, Christian Vest Hansen, Christophe Poucet, Chung-chieh
Shan, Conal Elliott, Conor McBride, Conrad Parker, Cosmo Kastemaa,
Creighton Hogg, Crutcher Dunnavant, Curtis Warren, D Hardman,
Dafydd Harries, Dale Jordan, Dan Doel, Dan Dyer, Dan Grover, Dan
Orias, Dan Schmidt, Dan Zwell, Daniel Chicayban Bastos, Daniel
Karch, Daniel Lyons, Daniel Patterson, Daniel Wagner, Daniil
Elovkov, Danny Yoo, Darren Mutz, Darrin Thompson, Dave Bayer, Dave
Hinton, Dave Leimbach, Dave Peterson, Dave Ward, David Altenburg,
David B. Wildgoose, David Carter, David Einstein, David Ellis,
David Fox, David Frey, David Goodlad, David Mathers, David
McBride, David Sabel, Dean Pucsek, Denis Bueno, Denis Volk, Devin
Mullins, Diego Moya, Dino Morelli, Dirk Markert, Dmitry Astapov,
Dougal Stanton, Dr Bean, Drew Smathers, Duane Johnson, Durward
McDonell, E. Jones, Edwin DeNicholas, Emre Sevinc, Eric Aguiar,
Eric Frey, Eric Kidd, Eric Kow, Eric Schwartz, Erik Hesselink,
Erling Alf, Eruc Frey, Eugene Grigoriev, Eugene Kirpichov, Evan
Farrer, Evan Klitzke, Evan Martin, Fawzi Mohamed, Filippo
Tampieri, Florent Becker, Frank Berthold, Fred Rotbart, Frederick
Ross, Friedrich Dominicus, Gal Amram, Ganesh Sittampalam, Gen
Zhang, Geoffrey King, George Bunyan, George Rogers, German Vidal,
Gilson Silveira, Gleb Alexeyev, Glenn Ehrlich, Graham Fawcett,
Graham Lowe, Greg Bacon, Greg Chrystall, Greg Steuck, Grzegorz
Chrupała, Guillaume Marceau, Haggai Eran, Harald Armin Massa,
Henning Hasemann, Henry Laxen, Hitesh Jasani, Howard B. Golden,
Ilmari Vacklin, Imam Tashdid ul Alam, Ivan Lazar Miljenovic, Ivan
Miljenovic, J. Pablo Fernández, J.A. Zaratiegui, Jaap Weel,
Jacques Richer, Jake McArthur, Jake Poznanski, Jakub Kotowski,
Jakub Labath, James Cunningham, James Smith, Jamie Brandon, Jan
Sabbe, Jared Roberts, Jason Dusek, Jason F, Jason Kikel, Jason
Mobarak, Jason Morton, Jason Rogers, Jeff Balogh, Jeff Caldwell,
Jeff Petkau, Jeffrey Bolden, Jeremy Crosbie, Jeremy Fitzhardinge,
Jeremy O'Donoghue, Jeroen Pulles, Jim Apple, Jim Crayne, Jim Snow,
Joan Jiménez, Joe Fredette, Joe Healy, Joel Lathrop, Joeri Samson,
Johannes Laire, John Cowan, John Doe, John Hamilton, John
Hornbeck, John Lien, John Stracke, Jonathan Guitton, Joseph Bruce,
Joseph H. Buehler, Josh Goldfoot, Josh Lee, Josh Stone, Judah
Jacobson, Justin George, Justin Goguen, Kamal Al-Marhubi, Kamil
Dworakowski, Keegan Carruthers-Smith, Keith Fahlgren, Keith
Willoughby, Ken Allen, Ken Shirriff, Kent Hunter, Kevin Hely,
Kevin Scaldeferri, Kingdon Barrett, Kristjan Kannike, Kurt Jung,
Lanny Ripple, Laurențiu Nicola, Laurie Cheers, Lennart Kolmodin,
Liam Groener, Lin Sun, Lionel Barret de Nazaris, Loup Vaillant,
Luke Plant, Lutz Donnerhacke, Maarten Hazewinkel, Malcolm
Reynolds, Marco Piccioni, Mark Hahnenberg, Mark Woodward, Marko
Tosic, Markus Schnell, Martijn van Egdom, Martin Bayer, Martin
DeMello, Martin Dybdal, Martin Geisler, Martin Grabmueller, Matúš
Tejiščák, Mathew Manela, Matt Brandt, Matt Russell, Matt Trinneer,
Matti Niemenmaa, Matti Nykänen, Max Cantor, Maxime Henrion,
Michael Albert, Michael Brauwerman, Michael Campbell, Michael
Chermside, Michael Cook, Michael Dougherty, Michael Feathers,
Michael Grinder, Michael Kagalenko, Michael Kaplan, Michael
Orlitzky, Michael Smith, Michael Stone, Michael Walter, Michel
Salim, Mikael Vejdemo Johansson, Mike Coleman, Mike Depot, Mike
Tremoulet, Mike Vanier, Mirko Rahn, Miron Brezuleanu, Morten
Andersen, Nathan Bronson, Nathan Stien, Naveen Nathan, Neil
Bartlett, Neil Whitaker, Nick Gibson, Nick Messenger, Nick
Okasinski, Nicola Paolucci, Nicolas Frisby, Niels Aan de Brugh,
Niels Holmgaard Andersen, Nima Negahban, Olaf Leidinger, Oleg
Anashkin, Oleg Dopertchouk, Oleg Taykalo, Oliver Charles, Olivier
Boudry, Omar Antolín Camarena, Parnell Flynn, Patrick Carlisle,
Paul Brown, Paul Delhanty, Paul Johnson, Paul Lotti, Paul Moore,
Paul Stanley, Paulo Tanimoto, Per Vognsen, Pete Kazmier, Peter
Aarestad, Peter Ipacs, Peter Kovaliov, Peter Merel, Peter Seibel,
Peter Sumskas, Phil Armstrong, Philip Armstrong, Philip Craig,
Philip Neustrom, Philip Turnbull, Piers Harding, Piet Delport,
Pragya Agarwal, Raúl Gutiérrez, Rafael Alemida, Rajesh Krishnan,
Ralph Glass, Rauli Ruohonen, Ravi Nanavati, Raymond Pasco, Reid
Barton, Reto Kramer, Reza Ziaei, Rhys Ulerich, Ricardo Herrmann,
Richard Harris, Richard Warburton, Rick van Hattem, Rob Grainger,
Robbie Kop, Rogan Creswick, Roman Gonzalez, Rory Winston, Ruediger
Hanke, Rusty Mellinger, Ryan Grant, Ryan Ingram, Ryan Janzen, Ryan
Kaulakis, Ryan Stutsman, Ryan T. Mulligan, S Pai, Sam Lee, Sandy
Nicholson, Scott Brickner, Scott Rankin, Scott Ribe, Sean Cross,
Sean Leather, Sergei Trofimovich, Sergio Urinovsky, Seth Gordon,
Seth Tisue, Shawn Boyette, Simon Brenner, Simon Farnsworth, Simon
Marlow, Simon Meier, Simon Morgan, Sriram Srinivasan, Sriram
Srinivasan, Stefan Aeschbacher, Stefan Muenzel, Stephan
Friedrichs, Stephan Nies, Stephan-A. Posselt, Stephyn Butcher,
Steven Ashley, Stuart Dootson, Terry Michaels, Thomas Cellerier,
Thomas Fuhrmann, Thomas Hunger, Thomas M. DuBuisson, Thomas
Moertel, Thomas Schilling, Thorsten Seitz, Tibor Simic, Tilo
Wiklund, Tim Clark, Tim Eves, Tim Massingham, Tim Rakowski, Tim
Wiess, Timo B. Hübel, Timothy Fitz, Tom Moertel, Tomáš Janoušek,
Tony Colston, Travis B. Hartwell, Tristan Allwood, Tristan
Seligmann, Tristram Brelstaff, Vesa Kaihlavirta, Victor Nazarov,
Ville Aine, Vincent Foley, Vipul Ved Prakash, Vlad Skvortsov,
Vojtěch Fried, Wei Cheng, Wei Hu, Will Barrett, Will Farr, Will
Leinweber, Will Robertson, Will Thompson, Wirt Wolff, Wolfgang
Jeltsch, Yuval Kogman, Zach Kozatek, Zachary Smestad, Zohar
Kelrich.

Sau cùng, chúng tôi muốn cảm ơn những độc giả, những người đã gửi 
hơn 800 ý kiến khuyết danh.
